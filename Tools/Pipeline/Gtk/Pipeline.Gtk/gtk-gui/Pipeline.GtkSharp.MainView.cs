
// This file has been generated by the GUI designer. Do not modify.
namespace Pipeline.GtkSharp
{
	public partial class MainView
	{
		private global::Gtk.UIManager UIManager;
		
		private global::Gtk.Action openAction;
		
		private global::Gtk.Action saveAction;
		
		private global::Gtk.Action executeAction;
		
		private global::Gtk.Action FileAction;
		
		private global::Gtk.Action ItemsAction;
		
		private global::Gtk.Action BuildAction;
		
		private global::Gtk.Action BuildAction1;
		
		private global::Gtk.Action RebuildAction;
		
		private global::Gtk.Action CleanAction;
		
		private global::Gtk.Action AddNewAction;
		
		private global::Gtk.Action AddExistingAction;
		
		private global::Gtk.Action openAction1;
		
		private global::Gtk.Action saveAction1;
		
		private global::Gtk.Action Action;
		
		private global::Gtk.Action ImportAction;
		
		private global::Gtk.Action Action1;
		
		private global::Gtk.Action deleteAction;
		
		private global::Gtk.Action NewAction;
		
		private global::Gtk.Action CloseAction;
		
		private global::Gtk.VBox vbox1;
		
		private global::Gtk.MenuBar menuBar;
		
		private global::Gtk.HPaned hpaned1;
		
		private global::Gtk.VPaned projectContiner;

		protected virtual void Build ()
		{
			global::Stetic.Gui.Initialize (this);
			// Widget Pipeline.GtkSharp.MainView
			Stetic.BinContainer w1 = global::Stetic.BinContainer.Attach (this);
			this.UIManager = new global::Gtk.UIManager ();
			global::Gtk.ActionGroup w2 = new global::Gtk.ActionGroup ("Default");
			this.openAction = new global::Gtk.Action ("openAction", null, null, "gtk-open");
			w2.Add (this.openAction, null);
			this.saveAction = new global::Gtk.Action ("saveAction", null, null, "gtk-save");
			w2.Add (this.saveAction, null);
			this.executeAction = new global::Gtk.Action ("executeAction", null, null, "gtk-execute");
			w2.Add (this.executeAction, null);
			this.FileAction = new global::Gtk.Action ("FileAction", global::Mono.Unix.Catalog.GetString ("File"), null, null);
			this.FileAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("File");
			w2.Add (this.FileAction, null);
			this.ItemsAction = new global::Gtk.Action ("ItemsAction", global::Mono.Unix.Catalog.GetString ("Items"), null, null);
			this.ItemsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Items");
			w2.Add (this.ItemsAction, null);
			this.BuildAction = new global::Gtk.Action ("BuildAction", global::Mono.Unix.Catalog.GetString ("Build"), null, null);
			this.BuildAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Build");
			w2.Add (this.BuildAction, null);
			this.BuildAction1 = new global::Gtk.Action ("BuildAction1", global::Mono.Unix.Catalog.GetString ("Build"), null, null);
			this.BuildAction1.ShortLabel = global::Mono.Unix.Catalog.GetString ("Build");
			w2.Add (this.BuildAction1, null);
			this.RebuildAction = new global::Gtk.Action ("RebuildAction", global::Mono.Unix.Catalog.GetString ("Rebuild"), null, null);
			this.RebuildAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Rebuild");
			w2.Add (this.RebuildAction, null);
			this.CleanAction = new global::Gtk.Action ("CleanAction", global::Mono.Unix.Catalog.GetString ("Clean"), null, null);
			this.CleanAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Clean");
			w2.Add (this.CleanAction, null);
			this.AddNewAction = new global::Gtk.Action ("AddNewAction", global::Mono.Unix.Catalog.GetString ("Add New"), null, null);
			this.AddNewAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add New");
			w2.Add (this.AddNewAction, null);
			this.AddExistingAction = new global::Gtk.Action ("AddExistingAction", global::Mono.Unix.Catalog.GetString ("Add Existing"), null, null);
			this.AddExistingAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Add Existing");
			w2.Add (this.AddExistingAction, null);
			this.openAction1 = new global::Gtk.Action ("openAction1", global::Mono.Unix.Catalog.GetString ("Open"), null, "gtk-open");
			this.openAction1.ShortLabel = global::Mono.Unix.Catalog.GetString ("Open");
			w2.Add (this.openAction1, null);
			this.saveAction1 = new global::Gtk.Action ("saveAction1", global::Mono.Unix.Catalog.GetString ("Save"), null, "gtk-save");
			this.saveAction1.ShortLabel = global::Mono.Unix.Catalog.GetString ("Save");
			w2.Add (this.saveAction1, null);
			this.Action = new global::Gtk.Action ("Action", global::Mono.Unix.Catalog.GetString ("-"), null, null);
			this.Action.ShortLabel = global::Mono.Unix.Catalog.GetString ("-");
			w2.Add (this.Action, null);
			this.ImportAction = new global::Gtk.Action ("ImportAction", global::Mono.Unix.Catalog.GetString ("Import"), null, null);
			this.ImportAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Import");
			w2.Add (this.ImportAction, null);
			this.Action1 = new global::Gtk.Action ("Action1", global::Mono.Unix.Catalog.GetString ("-"), null, null);
			this.Action1.ShortLabel = global::Mono.Unix.Catalog.GetString ("-");
			w2.Add (this.Action1, null);
			this.deleteAction = new global::Gtk.Action ("deleteAction", global::Mono.Unix.Catalog.GetString ("Exit"), null, "gtk-delete");
			this.deleteAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Exit");
			w2.Add (this.deleteAction, null);
			this.NewAction = new global::Gtk.Action ("NewAction", global::Mono.Unix.Catalog.GetString ("New"), null, null);
			this.NewAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("New");
			w2.Add (this.NewAction, null);
			this.CloseAction = new global::Gtk.Action ("CloseAction", global::Mono.Unix.Catalog.GetString ("Close"), null, null);
			this.CloseAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Close");
			w2.Add (this.CloseAction, null);
			this.UIManager.InsertActionGroup (w2, 0);
			this.Name = "Pipeline.GtkSharp.MainView";
			// Container child Pipeline.MacOS.MainView.Gtk.Container+ContainerChild
			this.vbox1 = new global::Gtk.VBox ();
			this.vbox1.Name = "vbox1";
			this.vbox1.Spacing = 6;
			// Container child vbox1.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><menubar name='menuBar'><menu name='FileAction' action='FileAction'><menuitem name='NewAction' action='NewAction'/><menuitem name='openAction1' action='openAction1'/><menuitem name='saveAction1' action='saveAction1'/><menuitem name='CloseAction' action='CloseAction'/><menuitem name='Action' action='Action'/><menuitem name='ImportAction' action='ImportAction'/><menuitem name='Action1' action='Action1'/><menuitem name='deleteAction' action='deleteAction'/></menu><menu name='ItemsAction' action='ItemsAction'><menuitem name='AddNewAction' action='AddNewAction'/><menuitem name='AddExistingAction' action='AddExistingAction'/></menu><menu name='BuildAction' action='BuildAction'><menuitem name='BuildAction1' action='BuildAction1'/><menuitem name='RebuildAction' action='RebuildAction'/><menuitem name='CleanAction' action='CleanAction'/></menu></menubar></ui>");
			this.menuBar = ((global::Gtk.MenuBar)(this.UIManager.GetWidget ("/menuBar")));
			this.menuBar.Name = "menuBar";
			this.vbox1.Add (this.menuBar);
			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.menuBar]));
			w3.Position = 0;
			w3.Expand = false;
			w3.Fill = false;
			// Container child vbox1.Gtk.Box+BoxChild
			this.hpaned1 = new global::Gtk.HPaned ();
			this.hpaned1.CanFocus = true;
			this.hpaned1.Name = "hpaned1";
			this.hpaned1.Position = 384;
			// Container child hpaned1.Gtk.Paned+PanedChild
			this.projectContiner = new global::Gtk.VPaned ();
			this.projectContiner.CanFocus = true;
			this.projectContiner.Name = "projectContiner";
			this.projectContiner.Position = 221;
			this.hpaned1.Add (this.projectContiner);
			global::Gtk.Paned.PanedChild w4 = ((global::Gtk.Paned.PanedChild)(this.hpaned1 [this.projectContiner]));
			w4.Resize = false;
			this.vbox1.Add (this.hpaned1);
			global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hpaned1]));
			w5.Position = 1;
			this.Add (this.vbox1);
			if ((this.Child != null)) {
				this.Child.ShowAll ();
			}
			w1.SetUiManager (UIManager);
			this.Hide ();
			this.executeAction.Activated += new global::System.EventHandler (this.executeActionClick);
			this.BuildAction1.Activated += new global::System.EventHandler (this.Build_Click);
			this.RebuildAction.Activated += new global::System.EventHandler (this.Rebuild_Click);
			this.CleanAction.Activated += new global::System.EventHandler (this.Clean_Click);
			this.AddNewAction.Activated += new global::System.EventHandler (this.AddNew_Click);
			this.AddExistingAction.Activated += new global::System.EventHandler (this.AddExisting_Click);
			this.openAction1.Activated += new global::System.EventHandler (this.Open_Click);
			this.saveAction1.Activated += new global::System.EventHandler (this.Save_CLick);
			this.ImportAction.Activated += new global::System.EventHandler (this.Import_Click);
			this.deleteAction.Activated += new global::System.EventHandler (this.Exit_Clicked);
			this.CloseAction.Activated += new global::System.EventHandler (this.CloseProject_Click);
		}
	}
}
